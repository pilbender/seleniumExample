<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.springapp</groupId>
    <artifactId>seleniumExample</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>seleniumExample</name>

    <properties>
        <spring.version>3.2.4.RELEASE</spring.version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
		<tomcat.version>7.0.47</tomcat.version>
		<selenium.version>2.44.0</selenium.version>
		<compiler.source>1.7</compiler.source>
    </properties>

    <dependencies>

		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.2</version>
            <scope>test</scope>
        </dependency>

		<!-- JSON Serialization -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.9</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.9</version>
		</dependency>

		<!-- Apache Tiles -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-core</artifactId>
			<version>2.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-jsp</artifactId>
			<version>2.2.1</version>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.16</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- Selenium Dependencies -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>${selenium.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>${selenium.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>xml-apis</groupId>
			<artifactId>xml-apis</artifactId>
			<version>1.4.01</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.3.1</version>
		</dependency>
    </dependencies>

    <build>
        <finalName>seleniumExample</finalName>
        <plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${compiler.source}</source>
					<target>${compiler.source}</target>
					<showDeprecation>true</showDeprecation>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
				<version>2.15</version>
                <configuration>
                    <includes>
                        <include>**/*Tests.java</include>
                    </includes>
                </configuration>
            </plugin>
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<port>8080</port>
					<systemProperties>
						<JAVA_OPTS>-Xmx1024m -XX:MaxPermSize=512m</JAVA_OPTS>
						<!-- Comment out the next line to enable S3 connections.
						Be careful that you are *not* connecting to production
						because database synchronization with S3 structure is critical!
						The way this would look as a JVM parameter on the tomcat server's
						catalina.sh is -Dspring.profiles.default=prod or -Dspring.profiles.active=dev -->
						<spring.profiles.active>dev</spring.profiles.active>
						<spring.profiles.default>prod</spring.profiles.default>
					</systemProperties>
					<additionalClasspathDirs>
						<additionalClasspathDir>${selenium-example.properties.directory}</additionalClasspathDir>
					</additionalClasspathDirs>
					<!--
					<httpsPort>8443</httpsPort>
					<keystoreFile>${basedir}/src/test/resources/keystore.jks</keystoreFile>
					<keystorePass>changeit</keystorePass>
					-->
					<!-- For Solr running on embedded Tomcat, This does not get picked up for some reason
					so a separate Jetty instance is configured to be run instead.  Also, the Maven profile "search"
					can be invoked during the tomcat7:run to fire up the instance automatically. -->
					<!--
					<addContextWarDependencies>true</addContextWarDependencies>
					-->
				</configuration>
			</plugin>
        </plugins>
    </build>
	<profiles>
		<profile>
			<!-- Run selenium tests.  You can execute these from the command line with:
			mvn -Pselenium -Dspring.profiles.active=local test
			You can run one test with:
			mvn -Pselenium -Dspring.profiles.active=local -Dit.test=LoginTest#testLogin test -->
			<id>selenium</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.16</version>
						<dependencies>
							<dependency>
								<groupId>org.apache.maven.surefire</groupId>
								<artifactId>surefire-junit4</artifactId>
								<version>2.16</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>test</id>
								<phase>test</phase>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<!-- Includes would go here but for now we are using the default patterns of class names.
									Listing them here for reference: "**/IT*.java" "**/*IT.java" "**/*ITCase.java"
									-->
									<!-- These next 3 lines are needed to keep WebDriver from dying during testing. -scott smith -->
									<argLine>-Xmx512m -XX:MaxPermSize=256m -javaagent:"${settings.localRepository}/org/springframework/spring-instrument/${spring.version}/spring-instrument-${spring.version}.jar"</argLine>
									<!--<forkMode>pertest</forkMode>-->
									<reuseForks>true</reuseForks>
									<useSystemClassLoader>true</useSystemClassLoader>
									<systemPropertyVariables>
										<!-- The other choice besides "grid" is "local".  This makes the selection in
										 the selenium configuration as to what type of bean to wire in for WebDriver selenium tests. -->
										<spring.profiles.active>grid</spring.profiles.active>
										<spring.profiles.default>grid</spring.profiles.default>
									</systemPropertyVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!-- This doesn't do anything except suppress all other JUnit tests because the surefire configuration is inherited in this profile -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.16</version>
						<configuration>
							<excludes>
								<exclude>**</exclude>
							</excludes>
							<systemPropertyVariables>
								<environment>${environment}</environment>
								<host>local</host>
							</systemPropertyVariables>
							<argLine>-XX:MaxPermSize=256m -javaagent:"${settings.localRepository}/org/springframework/spring-instrument/${spring.version}/spring-instrument-${spring.version}.jar"
							</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
